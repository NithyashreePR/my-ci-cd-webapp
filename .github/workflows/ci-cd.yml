# name: CI/CD Pipeline with Email

# on:
#   push:
#     branches: [main]

# jobs:
#   build-test-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3
#       - name: Use Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'

#       - run: npm ci
#       - run: npm test

#       - name: Build app
#         run: npm run build || echo "No build script defined"
        
#       - name: Trigger Render Deployment
#         env:
#           RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
#         run: |
#           echo "üöÄ Triggering Render deployment..."
#           curl -s -X POST "$RENDER_DEPLOY_HOOK"

#       - name: Trigger and Monitor Render Deployment
#         env:
#           RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
#           RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
#           SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
#         run: |
#           echo "üöÄ Triggering Render deployment..."
#           curl -s -X POST "$RENDER_DEPLOY_HOOK"

#           echo "‚è≥ Waiting for deployment to start..."

#           for i in {1..30}; do
#             RESPONSE=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
#               "https://api.render.com/v1/services/$SERVICE_ID/deploys")

#             DEPLOY_ID=$(echo "$RESPONSE" | jq -r '.[0].deploy.id')
#             STATUS=$(echo "$RESPONSE" | jq -r '.[0].deploy.status')

#             echo "Attempt $i - Deploy ID: $DEPLOY_ID - Status: $STATUS"

#             if [[ "$STATUS" == "live" ]]; then
#               echo "‚úÖ Deployment successful!"
#               break
#             elif [[ "$STATUS" == "failed" ]]; then
#               echo "‚ùå Deployment failed!"
#               break
#             fi

#             sleep 10
#           done

#       - name: Send Email Notification
#         uses: dawidd6/action-send-mail@v3
#         with:
#           server_address: smtp.gmail.com
#           server_port: 465
#           username: ${{ secrets.EMAIL_USERNAME }}
#           password: ${{ secrets.EMAIL_PASSWORD }}
#           subject: "‚úÖ Deployment Complete: Node.js App"
#           to: nithyashreepr10@gmail.com
#           from: "GitHub Actions <${{ secrets.EMAIL_USERNAME }}>"
#           body: |
#             üöÄ Hello Nithyashree!!

#             Your application was just deployed successfully.

#             üîó Live URL: https://my-ci-cd-webapp-wsrs.onrender.com
name: CI/CD Pipeline with Email

on:
  push:
    branches: [main]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - run: npm ci
      - run: npm test

      - name: Build app
        run: npm run build || echo "No build script defined"

      - name: Trigger Render Deployment
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          echo "üöÄ Triggering Render deployment..."
          curl -s -X POST "$RENDER_DEPLOY_HOOK"

      - name: Monitor Render Deployment and Set Status
        id: monitor
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "‚è≥ Waiting for deployment to start..."

          for i in {1..30}; do
            RESPONSE=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
              "https://api.render.com/v1/services/$SERVICE_ID/deploys")

            DEPLOY_ID=$(echo "$RESPONSE" | jq -r '.[0].deploy.id')
            STATUS=$(echo "$RESPONSE" | jq -r '.[0].deploy.status')

            echo "Attempt $i - Deploy ID: $DEPLOY_ID - Status: $STATUS"

            if [[ "$STATUS" == "live" ]]; then
              echo "‚úÖ Deployment successful!"
              echo "deploy_status=success" >> $GITHUB_OUTPUT
              exit 0
            elif [[ "$STATUS" == "failed" ]]; then
              echo "‚ùå Deployment failed!"
              echo "deploy_status=failed" >> $GITHUB_OUTPUT
              exit 0
            fi

            sleep 10
          done

          echo "‚ö†Ô∏è Deployment timed out"
          echo "deploy_status=timeout" >> $GITHUB_OUTPUT

      - name: Send Success Email
        if: steps.monitor.outputs.deploy_status == 'success'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚úÖ Deployment Complete: Node.js App"
          to: nithyashreepr10@gmail.com
          from: "GitHub Actions <${{ secrets.EMAIL_USERNAME }}>"
          body: |
            üöÄ Hello Nithyashree!!

            Your application was successfully deployed.

            üîó Live URL: https://my-ci-cd-webapp-wsrs.onrender.com

      - name: Send Failure Email
        if: steps.monitor.outputs.deploy_status != 'success'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚ùå Deployment Failed: Node.js App"
          to: nithyashreepr10@gmail.com
          from: "GitHub Actions <${{ secrets.EMAIL_USERNAME }}>"
          body: |
            ‚ùå Hello Nithyashree,

            Your application deployment has failed or timed out.

            Please check the GitHub Actions logs for more details.
